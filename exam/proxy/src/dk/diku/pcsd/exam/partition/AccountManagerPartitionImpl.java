
package dk.diku.pcsd.exam.partition;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebService(name = "AccountManagerPartitionImpl", targetNamespace = "http://partition.exam.pcsd.diku.dk/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface AccountManagerPartitionImpl {


    /**
     * 
     * @param arg0
     * @return
     *     returns double
     * @throws InexistentBranchException_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "calculateExposure", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.CalculateExposure")
    @ResponseWrapper(localName = "calculateExposureResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.CalculateExposureResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/calculateExposureRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/calculateExposureResponse", fault = {
        @FaultAction(className = InexistentBranchException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/calculateExposure/Fault/InexistentBranchException")
    })
    public double calculateExposure(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0)
        throws InexistentBranchException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     */
    @WebMethod
    @RequestWrapper(localName = "setBalances", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.SetBalances")
    @ResponseWrapper(localName = "setBalancesResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.SetBalancesResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/setBalancesRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/setBalancesResponse")
    public void setBalances(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        List<Account> arg1);

    /**
     * 
     */
    @WebMethod
    @RequestWrapper(localName = "setInitialized", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.SetInitialized")
    @ResponseWrapper(localName = "setInitializedResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.SetInitializedResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/setInitializedRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/setInitializedResponse")
    public void setInitialized();

    /**
     * 
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "startInitializing", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.StartInitializing")
    @ResponseWrapper(localName = "startInitializingResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.StartInitializingResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/startInitializingRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/startInitializingResponse")
    public boolean startInitializing();

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws InexistentBranchException_Exception
     * @throws InexistentAccountException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "credit", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.Credit")
    @ResponseWrapper(localName = "creditResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.CreditResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/creditRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/creditResponse", fault = {
        @FaultAction(className = InexistentBranchException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/credit/Fault/InexistentBranchException"),
        @FaultAction(className = InexistentAccountException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/credit/Fault/InexistentAccountException")
    })
    public void credit(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        double arg2)
        throws InexistentAccountException_Exception, InexistentBranchException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws InexistentBranchException_Exception
     * @throws InexistentAccountException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "debit", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.Debit")
    @ResponseWrapper(localName = "debitResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.DebitResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/debitRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/debitResponse", fault = {
        @FaultAction(className = InexistentBranchException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/debit/Fault/InexistentBranchException"),
        @FaultAction(className = InexistentAccountException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/debit/Fault/InexistentAccountException")
    })
    public void debit(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        double arg2)
        throws InexistentAccountException_Exception, InexistentBranchException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws InexistentBranchException_Exception
     * @throws InexistentAccountException_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "transfer", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.Transfer")
    @ResponseWrapper(localName = "transferResponse", targetNamespace = "http://partition.exam.pcsd.diku.dk/", className = "dk.diku.pcsd.exam.partition.TransferResponse")
    @Action(input = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/transferRequest", output = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/transferResponse", fault = {
        @FaultAction(className = InexistentBranchException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/transfer/Fault/InexistentBranchException"),
        @FaultAction(className = InexistentAccountException_Exception.class, value = "http://partition.exam.pcsd.diku.dk/AccountManagerPartitionImpl/transfer/Fault/InexistentAccountException")
    })
    public void transfer(
        @WebParam(name = "arg0", targetNamespace = "")
        int arg0,
        @WebParam(name = "arg1", targetNamespace = "")
        int arg1,
        @WebParam(name = "arg2", targetNamespace = "")
        int arg2,
        @WebParam(name = "arg3", targetNamespace = "")
        double arg3)
        throws InexistentAccountException_Exception, InexistentBranchException_Exception
    ;

}
